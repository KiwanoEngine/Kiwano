#!/usr/bin/env bash
#
# clang-format-all: a tool to run clang-format on an entire project
#
# Copyright (C) 2016 Evan Klitzke <evan@eklitzke.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

################################################################################
# Print usage instructions and exit
################################################################################
usage() {
    cat <<EOF
Usage:
  $0 DIR...

Runs clang-format on all valid source code files found under the specified
directories. Must pass at least one directory.

Examples:
  $0 .
  $0 src include tests
EOF
    exit 1
}

################################################################################
# Try to find an installed clang-format command (preferring unversioned if available)
################################################################################
find_clang_format() {
    local clangfmt

    # Attempt standard 'clang-format' first, then fallback to versioned commands
    for clangfmt in clang-format \
                    clang-format-15 clang-format-14 clang-format-13 clang-format-12 \
                    clang-format-11 clang-format-10 clang-format-9 clang-format-8 \
                    clang-format-7  clang-format-6  clang-format-5 clang-format-4 \
                    clang-format-3  clang-format-3.9 clang-format-3.8 \
                    clang-format-3.7 clang-format-3.6 clang-format-3.5 \
                    clang-format-3.4 clang-format-3.3 clang-format-3.2 \
                    clang-format-3.1 clang-format-3.0; do
        if command -v "${clangfmt}" &>/dev/null; then
            echo "${clangfmt}"
            return 0
        fi
    done
    return 1
}

################################################################################
# Recursively look upward for a .clang-format from a given directory
################################################################################
find_dominating_file() {
    local start_dir="$1"
    local target_file="$2"

    # If the file exists in this directory, done
    if [[ -r "$start_dir/$target_file" ]]; then
        return 0
    fi

    # If we've reached root without finding it, fail
    if [[ "$start_dir" == "/" ]]; then
        return 1
    fi

    # Recurse upward
    find_dominating_file "$(realpath "$start_dir/..")" "$target_file"
    return $?
}

################################################################################
# Main script logic
################################################################################
main() {
    # At least one directory must be passed
    if [[ $# -eq 0 ]]; then
        usage
    fi

    # Check that all arguments are valid directories
    for dir in "$@"; do
        if [[ ! -d "$dir" ]]; then
            echo "Error: '$dir' is not a directory."
            usage
        fi
    done

    # Attempt to find a working clang-format
    local FMT=""
    FMT="$(find_clang_format)"
    if [[ -z "$FMT" ]]; then
        echo "Error: Failed to find any 'clang-format' installation."
        exit 1
    fi

    echo "Using clang-format command: $FMT"

    # For each directory argument, find a dominating .clang-format and run clang-format
    for dir in "$@"; do
        pushd "$dir" &>/dev/null || {
            echo "Warning: Failed to enter directory '$dir'; skipping."
            continue
        }

        # Confirm there's a .clang-format in an upper directory
        if ! find_dominating_file "." ".clang-format"; then
            echo "Warning: No .clang-format found up the tree from $PWD. Skipping."
            popd &>/dev/null
            continue
        fi

        # Format all recognized source code files in place
        echo "Running clang-format in $(pwd)..."
        find . \
             \( -name '*.c'   -o -name '*.cc'   -o -name '*.cpp' \
             -o  -name '*.h'  -o -name '*.hh'   -o -name '*.hpp' \) \
             -exec "${FMT}" -i '{}' \;

        popd &>/dev/null
    done
}

main "$@"
